VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "OPCGroupClass"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
' The OPCGroupClass object houses all of the functionallity used
' to interact with OPC groups.  The OPCGroupClass is used primarily
' by the OPCServerClass.  When AddOPCGroup is called on an instance of
' the OPCServerClass object, it creates an instance of a OPCGroupClass
' object.  In general you normally won't directly create a OPCGroupClass
' object.  You gain access to them as you add groups to your OPCServerClass
' object.  Each group you add to the server is given a unique group key
' name.  Using this key name and the GetOPCServerGroupCollection function
' of the OPCServerClass you can access specific instances of the
' OPCGroupClass.  The OPCGroupClass object wraps the Automation
' interface OPCGroup object and OPCItems (Collection). This diagram shows the relationships
' between the various components of the Automation interface wrapper.
'
'    OPCServer
'           |
'           +-OPC Groups (Collection)
'                      |
' >                    +-OPC Group                           <
' >                              |                           <
' >                              +-OPC Items (Collection)    <
'                                           |
'                                           +-OPC Items
'
' The OPCGroupClass object handles functions found in the second two
' branches of this diagram, the OPCGroup object and OPCItems collection.
' I have not implemented all of the methods and properties found in these
' objects.  Adding access to any methods or properties not currently in
' this module is easy.
'
' While you won't normally directly create an OPCGroupClass object you
' will utilize the functions found in this object.


Option Explicit
Option Base 1

' The OPCGroupName contains the actual string name that you provided
' when adding the group.  If you left the group name blank when adding
' the group this name will contain the group name assigned by the OPC
' server.  This is a convient feature of the OPC server interface.
' Your program doesn't need to supply a group name you can allow the
' server to provide one.  There is a catch however, some servers may not
' have implemented this properly.  In some cases you may be able to
' add the first group without a name but the second time you add a group
' it may fail because the server thinks the second group name is the
' same as the first blank group you added.  This problem is rare.
' Our KEPServer and KEPServerEX will allow you to add as many groups
' as you like.
Dim OPCGroupName As String

' This is a string key used to reference this OPCGroupClass object.  The
' OPCGroupKey can be used by the VB application anyway the user
' sees fit.  In some cases this is used as a key in controls such as
' a treeview of a listview.  Using this key and the GetOPCServerGroupCollection
' of the OPCServerClass object you can get direct access to a specific
' instance of the OPCGroupClass.  This key is generated by the AddOPCGroup
' function of the OPCServerClass object.
Dim OPCGroupKey As String

' The OPCGroupObj is the actual group object of the Automation Interface
Dim WithEvents OPCGroupObj As OPCGroup
Attribute OPCGroupObj.VB_VarHelpID = -1

' As items are added to this group they will be placed into this collection
Dim OPCGroupItems As New Collection

' This value holds the numeric value of the OPCGroupKey string above.
Dim GroupIndex As Integer

' This routine initializes the OPCGroupClass object.
'
Sub SetOPCGroup(ByVal OPCGroupObject As OPCGroup, ByVal GroupName As String, ByVal GroupKey As String, ByVal GroupIndx As Integer)
    ' Assign the group object for this instance of the class
    Dim StoreName As String
    Dim StoreKey As String
    
    Set OPCGroupObj = OPCGroupObject
    StoreName = GroupName
    OPCGroupName = StoreName
    
    StoreKey = GroupKey
    OPCGroupKey = StoreKey
    
    GroupIndex = GroupIndx
    ' ****************************************************************
    ' Mark this group to receive asynchronous updates via the DataChange event.
    ' This setting is IMPORTANT. Without setting '.IsSubcribed' to True your
    ' VB application will not receive DataChange notifications.  This will
    ' make it appear that you have not properly connected to the server.
    
    OPCGroupObj.IsSubscribed = True
   
End Sub

' This sub simply returns the group name set when the class instance was created'
'
Function GetGroupName()
    GetGroupName = OPCGroupName
End Function

' This sub simply returns the group key set when the class instance was created
'
Function GetGroupKey()
    GetGroupKey = OPCGroupKey
End Function

' This sub simply returns the group index set when the class instance was created
'
Function GetGroupIndex()
    GetGroupIndex = GroupIndex
End Function

' This sub simply returns the Item Collection that is part of this class.
'
Function GetOPCGroupItemsCollection()
    Set GetOPCGroupItemsCollection = OPCGroupItems
End Function

' This function allows the group's active state to be changed on the fly.  The
' OPCGroup object provides a number of properties that can be used to control
' a group's operation.  The '.IsActive' property allows you to turn all of the
' OPC items in the group On(active) and Off(inactive).  To see the effect that
' the group's '.InActive' property has on an OPC Server run this demo and connect
' with KEPServerEX, add a group, add a few items.  Once you see changing data
' right click on the group to access the group properties then toggle
' the active state.  If you watch the KEPServerEX OPC Server you will see
' it's active tag count change from 'No Active Items' when the group is made
' inactive to the count of item in the group when the group is made active.
' Changing the actvie state of a group can be useful in controlling how your
' application makes use of an OPC Server's communication bandwidth.  If you don't
' need any of the data in a given group simply set it inactive, this will allow an
' OPC Server to gather only the data current required by your application.
'
Function SetGroupActiveState(ByVal ActiveState As Integer)
    'Set error handling for OPC Function
    On Error GoTo ShowOPCGroupActiveError
    OPCGroupObj.IsActive = ActiveState
    SetGroupActiveState = True
    GoTo SkipGroupActiveError
ShowOPCGroupActiveError:
    Call DisplayOPC_COM_ErrorValue("Group Active State", Err.Number)
    SetGroupActiveState = False
SkipGroupActiveError:
    
End Function

' This function get the current value of the group's active state
'
Function GetGroupActiveState(ByRef ActiveState As Boolean)
    'Set error handling for OPC Function
    On Error GoTo ShowOPCGetGroupActiveError
    ActiveState = OPCGroupObj.IsActive
    GetGroupActiveState = True
    GoTo SkipGetGroupActiveError
ShowOPCGetGroupActiveError:
    Call DisplayOPC_COM_ErrorValue("Get Group Active State", Err.Number)
    GetGroupActiveState = False
SkipGetGroupActiveError:
    
End Function


' This function allows the group's deadband to be changed on the fly.  Like the
' '.IsActive' property, the '.DeadBand' property can be changed at any time.
' The Deadband property allows you to control how much change must occur in
' an OPC item in this group before the value will be reported in the 'DataChange'
' event.  The value entered for '.DeadBand' is 0 to 100 as a percentage of full
' scale for each OPC item data type within this group.  If your OPC item is a
' Short(VT_I2) then your full scale is -32768 to 32767 or 65535.  If you
' enter a Deadband value of 1% then all OPC Items in this goup would need
' to change by a value of 655 before the change would be returned in the
' 'DataChange' event.  The '.DeadBand' property is a floating point number
' allowing very small ranges of change to be filtered.
'
Function SetGroupDeadBand(ByVal DeadBand As Single)
    'Set error handling for OPC Function
    On Error GoTo ShowOPCSetGroupDeadBandError
    
    OPCGroupObj.DeadBand = DeadBand
    SetGroupDeadBand = True
    GoTo SkipSetGroupDeadBandError

ShowOPCSetGroupDeadBandError:
    Call DisplayOPC_COM_ErrorValue("Set Group Dead Band", Err.Number)
    SetGroupDeadBand = False
SkipSetGroupDeadBandError:
End Function

' This function get the current value of the group's Dead Band
'
Function GetGroupDeadBand(ByRef DeadBand As Single)
    'Set error handling for OPC Function
    On Error GoTo ShowOPCGetGroupDeadBandError
    
    DeadBand = OPCGroupObj.DeadBand
    GetGroupDeadBand = True
    GoTo SkipGetGroupDeadBandError

ShowOPCGetGroupDeadBandError:
    Call DisplayOPC_COM_ErrorValue("Get Group Dead Band", Err.Number)
    GetGroupDeadBand = False
SkipGetGroupDeadBandError:
End Function

' This function allows the group's update rate to be changed on the fly.  The
' '.UpdateRate' property allows you to control how often data from this
' group will be returned to your application in the 'DataChange' event.
' The '.UpdateRate' property can be used to control and improve the overall
' performance of you application.  In this example you can see that the update
' rate is set for a fast update speed.  In a demo that's OK.  In your real
' world application, forcing the OPC Server to gather all of the OPC items in
' a group at their fastest rate may not be ideal.  In applications where you
' have data that needs to be acquired at different rates you can create
' multiple groups each with its own update rate.  Using multiple groups would
' allow you to gather time critical data in GroupA with an update rate
' of 200 millliseconds, and gather low priority data from GroupB with an
' update rate of 7000 milliseconds.  The lowest value for the '.UpdateRate'
' is 0 which tells the OPC Server go as fast as possible.  The maximium is
' 2147483647 milliseconds which is about 596 hours.
'
Function SetGroupUpdateRate(ByVal UpdateRate As Long)
    'Set error handling for OPC Function
    On Error GoTo ShowOPCSetGroupUdateRateError
    
    OPCGroupObj.UpdateRate = UpdateRate
    SetGroupUpdateRate = True
    GoTo SkipSetGroupUdateRateError

ShowOPCSetGroupUdateRateError:
    Call DisplayOPC_COM_ErrorValue("Set Group Update Rate", Err.Number)
    SetGroupUpdateRate = False
SkipSetGroupUdateRateError:
End Function

' This function gets the current value of the group's Update Rate
'
Function GetGroupUpdateRate(ByRef UpdateRate As Long)
    'Set error handling for OPC Function
    On Error GoTo ShowOPCGetGroupUdateRateError
    
    UpdateRate = OPCGroupObj.UpdateRate
    GetGroupUpdateRate = True
    GoTo SkipGetGroupUdateRateError

ShowOPCGetGroupUdateRateError:
    Call DisplayOPC_COM_ErrorValue("Get Group Update Rate", Err.Number)
    GetGroupUpdateRate = False
SkipGetGroupUdateRateError:
End Function

' This function allows you to set the default data type for the addition
' of items to a group. When adding an item to an OPC group the item's data
' type can be set using the default data type accessed here.  You will see
' that items are added to the OPCGroupClass object the default data type
' is set for each item that is added.
'
Function SetOPCItemsDefaultDataType(ByVal DataType As Integer)
    'Set error handling for OPC Function
    On Error GoTo ShowOPCItemsDefaultDataTypeError
    
    OPCGroupObj.OPCItems.DefaultRequestedDataType = DataType
    SetOPCItemsDefaultDataType = True
    GoTo SkipOPCItemsDefaultDataTypeError

ShowOPCItemsDefaultDataTypeError:
    Call DisplayOPC_COM_ErrorValue("Set OPC Item Default Data Type", Err.Number)
    SetOPCItemsDefaultDataType = False
SkipOPCItemsDefaultDataTypeError:
End Function

' This function gets the default item data type of a group
'
Function GetOPCItemsDefaultDataType(ByRef DataType As Integer)
    'Set error handling for OPC Function
    On Error GoTo ShowOPCGetItemsDefaultDataTypeError
    
    DataType = OPCGroupObj.OPCItems.DefaultRequestedDataType
    GetOPCItemsDefaultDataType = True
    GoTo SkipOPCGetItemsDefaultDataTypeError

ShowOPCGetItemsDefaultDataTypeError:
    Call DisplayOPC_COM_ErrorValue("Get OPC Item Default Data Type", Err.Number)
    GetOPCItemsDefaultDataType = False
SkipOPCGetItemsDefaultDataTypeError:
End Function

' This function allows you to set the default active state of items
' being added to the group.  If you want to add item to an OPC group
' but do not want the server to start accessing those values immediately
' you can change the default active state for the items to inactive.
' As you add items to the group they will be added in an inactive state.
' Once the items have been added to the group you can enable them for
' reading by using the 'SetItemActiveState' function found in the
' OPCItemClass.
'
Function SetOPCItemsDefaultActive(ByVal ActiveState As Integer)
    'Set error handling for OPC Function
    On Error GoTo ShowOPCItemsDefaultActiveError
    
    OPCGroupObj.OPCItems.DefaultIsActive = ActiveState
    SetOPCItemsDefaultActive = True
    GoTo SkipOPCItemsDefaultActiveError

ShowOPCItemsDefaultActiveError:
    Call DisplayOPC_COM_ErrorValue("Set OPC Item Default Active State", Err.Number)
    SetOPCItemsDefaultActive = False
SkipOPCItemsDefaultActiveError:
End Function

' This function gets the default active state for items added to this
' group.
Function GetOPCItemsDefaultActive(ByRef ActiveState As Integer)
    'Set error handling for OPC Function
    On Error GoTo ShowOPCGetItemsDefaultActiveError
    
    ActiveState = OPCGroupObj.OPCItems.DefaultIsActive
    GetOPCItemsDefaultActive = True
    GoTo SkipOPCGetItemsDefaultActiveError

ShowOPCGetItemsDefaultActiveError:
    Call DisplayOPC_COM_ErrorValue("Get OPC Item Default Active State", Err.Number)
    GetOPCItemsDefaultActive = False
SkipOPCGetItemsDefaultActiveError:
End Function


' This function handles adding an item to the group and
' establishing the item interface.  When adding an item you
' can preset some of the item's parameters using the functions
' 'SetOPCItemsDefaultActive' and 'SetOPCItemsDefaultDataType'.
' These are set before adding the item. Once the item has been
' successfully added you can change these same settings on the
' fly using the properties on the resulting OPCItemClass object.
' The OPCItemID parameter is a fully qualified item name within the
' desired OPC server.  If this string is incorrect the server will
' return an error.  The DataType is the desired data type for this
' item.  The server may accept or reject this data type.  The
' ActiveState parameter allows you to make this item active or inactive
' from the momment it is added to the group.
'
' The ItemKey is string that will be returned to the VB application.
' This string can be used as a key for this item in a collection.
'
Function AddOPCItem(ByVal OPCItemID As String, ByVal DataType As Integer, ByVal ActiveState As Integer, ByRef ItemKey As String)
    
   'Set error handling for OPC Function
    On Error GoTo ShowOPCItemAddError
    
    Dim ItemToAdd As New OPCItemClass
    Dim NewItem As OPCItem
    Dim ItemIndex As Integer
    Dim TmpOPCItemID As String
              
    ' Establish the initial default conditions for new items added to this
    ' group.
    SetOPCItemsDefaultActive (ActiveState)
    SetOPCItemsDefaultDataType (DataType)
    TmpOPCItemID = OPCItemID
    
    ' Search the existing items and find the next available index number
    ItemIndex = FindNextItemNumber
        
    ' The group is added to the server using the group name that is derived
    ' when the group is created.  This is the same key name used in the tree
    ' view
    Set NewItem = OPCGroupObj.OPCItems.AddItem(OPCItemID, ItemIndex)
        
    If Not NewItem Is Nothing Then
        ItemToAdd.SetOPCItem NewItem, TmpOPCItemID, ItemIndex, DataType
       
        ' Although the OPCGroups (ServerGroups) object is already a collection we need to have our
        ' own class wrapper to contain the properties and event for each group we
        ' intend to add to the server.
        ItemKey = "Item" + Str(ItemIndex)
        With OPCGroupItems
            .Add ItemToAdd, Str(ItemIndex)
        End With
    Else
        AddOPCItem = False ' Signify a failure of this function
        Exit Function
    End If
        
    AddOPCItem = True
    
    GoTo SkipAddItemError

ShowOPCItemAddError:
    Call DisplayOPC_COM_ErrorValue("Add Item", Err.Number)
    AddOPCItem = False
SkipAddItemError:
    
End Function


' This sub handles removing an item from the OPC group.  The item
' is removed from the OPCItems object which is the collection
' managed by the automation interface.  Then the item is removed from
' the OPCGroupItems collection which is managed by the OPCGroupClass
'
Function RemoveOPCItem(ItemKey As String, ByRef Error As Long)
    'Set error handling for OPC Function
    On Error GoTo ShowOPCItemRemoveError
            
    Dim OPCItemToRemove As OPCItemClass
    Dim ServerHandles(1) As Long
    Dim Errors() As Long
    Dim Count As Long
    
    ' First the item is removed from the actual OPCItems collection managed by
    ' the automation interface
    Set OPCItemToRemove = OPCGroupItems.Item(Mid(ItemKey, InStr(ItemKey, " ")))
    ServerHandles(1) = OPCItemToRemove.GetItemServerHandle
    Count = 1
    OPCGroupObj.OPCItems.Remove Count, ServerHandles, Errors
    
    If Errors(1) <> 0 Then
        Error = Err.Number = Errors(1)
        GoTo ShowOPCItemRemoveError
    End If
    
    ' Now we remove it from the OPCGroupItems collection
    ' to allow any final processing on the item to be done
    OPCGroupItems.Remove (Mid(ItemKey, InStr(ItemKey, " ")))
        
    RemoveOPCItem = True
    GoTo SkipRemoveItemError

ShowOPCItemRemoveError:
    Call DisplayOPC_COM_ErrorValue("Remove Item", Err.Number)
    RemoveOPCItem = False
SkipRemoveItemError:
End Function


' This function attempts to keep the item index number
' from continuosly growing by finding an item number that
' may have been deleted and returning those first before
' going to the next item index number. The end result of
' this function it that the item number will never grow
' beyond actual number of items.
'
Private Function FindNextItemNumber()
    ' In this function an error state menas that a vacant
    ' item number has been found.
    On Error GoTo FoundNextItemNumber
    
    Dim i As Integer
    Dim ItemNum As Integer
    
    ItemNum = 1
    
    With OPCGroupItems
        ' This loop tries to access each item in the OPCGroupItems
        ' collection by it's Key.  If an item can not be pulled from the
        ' collection that means the item had been deleted and it's
        ' item number is available.
        For i = 1 To .Count
            ItemNum = i
            .Item (Str(i))
        Next i
        
        ' If we get here all of the item numbers in the collection
        ' exist and a next available item number should be returned.
        If .Count <> 0 Then
            FindNextItemNumber = i
        Else
            FindNextItemNumber = 1 ' No count return the first 1
        End If
    End With
    
    GoTo NewIndex
    
FoundNextItemNumber:
    ' If we get here an item number could not be found in the
    ' OPCGroupItems collection which means that it has been deleted
    ' and is available for a new item addition.
    FindNextItemNumber = ItemNum
NewIndex:
End Function


' The ValidateOPCItem function is a valuable tool in your OPC application.
' The validate function allows you to test an item before it is
' actually added to the OPC group.  The validate function will test the
' Item ID, DataType, and ActiveState of the item.  If all of these
' parameters are acceptable to the server no error will be returned.

Function ValidateOPCItem(ByVal OPCItemID As String, ByVal DataType As Integer, ByVal ActiveState As Integer, ByRef Error As Long)
         
    Dim Errors() As Long
    Dim ItemCount As Long
    Dim OPCItemIDs(1) As String
    Dim RequestedDataTypes(1) As Integer
   'Set error handling for OPC Function
    On Error GoTo ShowOPCItemValidateError
    
    ' Establish the initial default conditions for new items added to this
    ' group.
    SetOPCItemsDefaultActive (ActiveState)
    SetOPCItemsDefaultDataType (DataType)
    
    OPCItemIDs(1) = OPCItemID
    RequestedDataTypes(1) = DataType
    ItemCount = 1
    
    ' Test the item
    OPCGroupObj.OPCItems.Validate ItemCount, OPCItemIDs, Errors, RequestedDataTypes
    
    ' return any errors
    If Errors(1) <> 0 Then
       Error = Errors(1)
       ValidateOPCItem = False
       GoTo SkipValidateItemError
    End If
    
    ValidateOPCItem = True
    GoTo SkipValidateItemError

ShowOPCItemValidateError:
    Call DisplayOPC_COM_ErrorValue("Validate Item", Err.Number)
    ValidateOPCItem = False
SkipValidateItemError:
    
End Function

' This function performs a single write using the AsyncWrite method
' of the OPCGroup object that is part of the Automation Interface.
' OPC data can be written in one of two ways. Using the Asynchronous
' write as shown here or using a Sychronous write.  Both methods have
' their benefits.  The Synchronous method has the benefit of simplicity.
' When you perform a sync write operation the call is made to the OPC server
' and the server does not return until the write has been completed.  From
' a coding standpoint that can be an easy thing to deal with.  From an
' actual application standpoint it can present some interesting problems.
' As the name implies a Synchronous write operation is synchonized to
' operation of the target OPC server.  When a sync write is issued the call
' will not return until the server has completed the whole write operation.
' If the communications driver you are using is perhaps a serial device
' going over a slow modem link this pause before the sync write returns
' can be considerable.  Having this delay occur in your VB application
' could cause the end user to perceive your VB app as as having bad
' performance simply because it needs to wait for a write to complete.
'
' There is a better way.
'
' The Asynchronous write operation differs from the Synchronous operation
' in two key ways.  First, the Async write does not require the VB
' application to wait until the OPC server completes the write.  Second,
' the Async write requires an event handler to receive the notification
' that the write has completed.
'
' Returning immediately to your VB application from the AsyncWrite
' call makes using the method as easy as the Sync write call but
' an event handler for the write must be used if you want to know
' the true actual result of the write operation.  In this example
' only a single value is written for simplicity.  In your
' application a list of items can be passed to the function
' with equal ease. If an error occurs in processing the command
' you will still see that error returned on the return from the
' AsyncWrite method.
'
' The method you use for writing data to an OPC server can be a
' factor of your application.  If there is no driving reason to use
' a synchronous operation I strongly urge you to use the asynchronous
' methods.  The asynchronous methods allow the OPC server to schedule
' the operaiton you have requested such that it can be processed
' as soon as the server can finish its current operations.  The
' synchronous methods force the OPC server to stop in its tracks
' and attempt to complete the sync operation.  While this may sound
' ideal, it prevents an OPC server from ever being able to optimize
' your overall communications requirements.  If you used all syncchronous
' operations for both read and write data, the OPC server would never
' be able to take advantage of the protocol optimizations that most if
' not all OPC servers perform.
'
Function AsyncWriteOPCItem(ObjectToWrite As OPCItemClass, ValueToWrite As Variant)
    
    Dim ServerHandles(1) As Long
    Dim Errors() As Long
    Dim Count As Long
    Dim TransactionID As Long
    Dim CancelID As Long
    Dim Values(1) As Variant
    'Set error handling for OPC Function
    On Error GoTo ShowOPCItemWriteError
    
    ' Currently the write function is designe to write only
    ' one value at a time. This can easily be changed by simly
    ' increasing the number of item passed in these arrays.
    Count = 1
    
    ' Get the handle of the server we intend to write.
    ServerHandles(1) = ObjectToWrite.GetItemServerHandle
    
    ' Since we are doing only one write and it is driven by
    ' User input the TransactionID can be kept relatively simple.
    ' If you expand the write function to write a random number of
    ' item you will want to use a more complex scheme for a
    ' TransactionID.  Also keep in mind that you can issue muliple
    ' Async write functions which may not complete in any specific
    ' order. With that said use a TransactionID method that can fit
    ' your application.
    TransactionID = 1
    
    ' This example writes only a sinlge value at a time but can be
    ' to send a list of items to the server in a single call.  The
    ' Transaction ID becomes very crucial when sending more than
    ' one write to the server.  If you send a list of items they may
    ' not return in a single event handler call and they may not
    ' return in any specific order.
    Values(1) = ValueToWrite
    
    ' Perform the write.
    OPCGroupObj.AsyncWrite Count, ServerHandles, Values, Errors, TransactionID, CancelID
    
    AsyncWriteOPCItem = True
GoTo SkipItemWriteError

ShowOPCItemWriteError:
    Call DisplayOPC_COM_ErrorValue("Write Item", Err.Number)
    AsyncWriteOPCItem = False
SkipItemWriteError:

End Function


' Handles displaying any OPC/COM/VB errors that are caught by the exception handler
Sub DisplayOPC_COM_ErrorValue(OPC_Function As String, ErrorCode As Long)
    Dim Response
    Dim ErrorDisplay As String
    ErrorDisplay = "The OPC function '" + OPC_Function + "' has returned an error of " + Str(ErrorCode) + " or Hex 0x" + Hex(ErrorCode)
    Response = MsgBox(ErrorDisplay, vbOKOnly, "OPC Function Error")
End Sub

' If you have something to do when an OPCGroupClass object is created put it here.
Private Sub Class_Initialize()
    ' To Do
End Sub

' If you have somehting to do when an OPCGroupClass object is released put it here.
Private Sub Class_Terminate()
'To Do  We have nothing to be released at this time
End Sub

' ************************************************************
' The Next section of the OPCGroupClass are the event handlers

' This sub handles the 'DataChange' call back event which returns data that has
' been detected as changed within the OPC Server.  This call back should be
' used primarily to receive the data.  Do not make any other calls back into
' the OPC server from this call back.  The other item related functions covered
' in this example have shown how the ItemServerHandle is used to control and
' manipulate individual items in the OPC server.  The 'DataChange' event allows
' us to see how the 'ClientHandles we gave the OPC Server when adding items are
' used.  As you can see here the server returns the 'ClientHandles' as an array.
' The number of item returned in this event can change from trigger to trigger
' so don't count on always getting a 1 to 1 match with the number of items
' you have registered.  That's where the 'ClientHandles' come into play.  Using
' the 'ClientHandles' returned here you can determine what data has changed and
' where in your application the data should go.  In this example the
' 'ClientHandles' were the Index number of each item we added to the group.
' Using this returned index number the 'DataChange' handler shown here knows
' what items in the collection need to be updated with new data.
'
Private Sub OPCGroupObj_DataChange(ByVal TransactionID As Long, ByVal NumItems As Long, ClientHandles() As Long, ItemValues() As Variant, Qualities() As Long, TimeStamps() As Date)
    ' We don't have error handling here since this is an event called from the OPC interface
    
    On Error Resume Next
 
    Dim UpdateItem As OPCItemClass
    Dim i As Integer
    
    For i = 1 To NumItems
        ' Get OPCItemClass object from the collection that is kept by
        ' the OPCGroupClass object.  This is found by using the client handle
        ' returned from the server for each item being returned in this event
        ' as the Item Key within the collection.
        Set UpdateItem = OPCGroupItems.Item(Str(ClientHandles(i)))
        ' If the item is valid then update the contents of the item.  For this
        ' example the contents of the item will then be displayed in the
        ' list box of the application.  For your application you can be assured
        ' that any time you need to access an OPC item in this group that it
        ' will contain the latest data.  Like the Listbox used in this example,
        ' your application  must keep track of the data item it desires by
        ' using the item collection key.
        If Not UpdateItem Is Nothing Then
            UpdateItem.UpdateOPCItemData ItemValues(i), Qualities(i), TimeStamps(i)
        End If
    Next i

End Sub

' This sub handles 'AsyncWriteComplete' call back event that occurs
' whenever an AsyncWrite operation is issued to the OPC server.  As
' discussed in the AsyncWriteOPCItem, the AsyncWriteComplete call back
' event allows your application to determine the results of a write
' operation that has been issued at some other point in your application.
' When using the asynchronous write function there is no way to know how
' or if a write operation has completed successfully when the write is
' issued.  The server must inform your application of the results of the
' write operation. Using the transaction ID and ClientHandles you can
' associate each complete event with a specific OPC item.  In this example
' the Item quality field of an item is simply updated to reflect the results
' of the write.
'
' In your application may want to use the asynchronous write complete event
' as a trigger to send addtional data to the OPC server.  In all cases it is
' suggested that no other OPC operation be issued from within the call
' back event.

Private Sub OPCGroupObj_AsyncWriteComplete(ByVal TransactionID As Long, ByVal NumItems As Long, ClientHandles() As Long, Errors() As Long)
    Dim UpdateItem As OPCItemClass
    Dim i As Integer
    
    For i = 1 To NumItems
        ' Get OPCItemClass object from the collection that is kept by
        ' the OPCGroupClass object.  This is found by using the client handle
        ' returned from the server for each item being returned in this event
        ' as the Item Key within the collection.
        Set UpdateItem = OPCGroupItems.Item(Str(ClientHandles(i)))
        
        ' If the item is valid then check the error flag for the item and
        ' clear the item's quality field.  Setting to zero is considered an
        ' error for an OPC item quality value.
        If Not UpdateItem Is Nothing Then
            If Errors(i) Then
                UpdateItem.SetItemQuality (0)
            End If
        End If
    Next i
End Sub
